{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"nav2/","text":"Welcome to the ros2Nav wiki! RPLiDAR A3M1 Base controller Microros agent to communicate with OpenCR ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0 -v6 ekf.yaml EKFekf_filter_node: ros__parameters: frequency: 30.0 two_d_mode: true publish_tf: true map_frame: map odom_frame: odom base_link_frame: base_footprint world_frame: odom #x , y , z, #roll , pitch , yaw, #vx , vy , vz, #vroll , vpitch, vyaw, #ax , ay , az odom0: odom/unfiltered odom0_config: [false, false, false, false, false, false, true, true, false, false, false, true, false, false, false] odom0_differential: true odom0_relative: false imu0: imu/data imu0_config: [false, false, false, false, false, true, false, false, false, false, false, true, false, false, false] imu0_differential: false imu0_relative: true imu0_queue_size: 2 Check topic publishing rate pi@pi-desktop:~$ ros2 topic hz /odom/unfiltered average rate: 48.074 min: 0.019s max: 0.025s std dev: 0.00124s window: 50 average rate: 48.147 min: 0.019s max: 0.025s std dev: 0.00117s window: 99 average rate: 48.082 min: 0.019s max: 0.025s std dev: 0.00111s window: 147 Bring up install IMU : witmotion : witmotion package install movebase controller: openCR : microros agent and microros Arduino intall EKF robot localization: --- : sudo apt install ros-humble-robot-localization bringup.py from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node import os def generate_launch_description(): config_witmotion = os.path.join(get_package_share_directory('witmotion_ros'),'config', 'wt61c.yml') ekf_config_path = '/home/pi/amr_config/ekf.yaml' return LaunchDescription([ Node( package='micro_ros_agent', executable='micro_ros_agent', name='micro_ros_agent', arguments=[\"serial\", \"--dev\", \"/dev/ttyACM0\", \"-v6\"] ), Node( package = 'witmotion_ros', executable = 'witmotion_ros_node', parameters = [config_witmotion] ), Node( package='robot_localization', executable='ekf_node', name='ekf_filter_node', output='screen', parameters=[ ekf_config_path ], remappings=[(\"odometry/filtered\", \"odom\")] ), ]) TF eru.urdf <?xml version=\"1.0\" ?> <robot name=\"turtlebot3_burger\" xmlns:xacro=\"http://ros.org/wiki/xacro\"> <link name=\"base_footprint\"/> <joint name=\"base_joint\" type=\"fixed\"> <parent link=\"base_footprint\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.020\" rpy=\"0 0 0\"/> </joint> <link name=\"base_link\"> </link> <joint name=\"imu_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"imu_link\"/> <origin xyz=\"-0.007 0 0.05\" rpy=\"0 0 0\"/> </joint> <link name=\"imu_link\"/> <joint name=\"scan_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"base_scan\"/> <origin xyz=\"-0.04 0 0.095\" rpy=\"0 0 0\"/> </joint> <link name=\"base_scan\"> </link> <joint name=\"wheel_left_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"wheel_left_link\"/> <origin xyz=\"0.0 0.08 0.023\" rpy=\"-1.57 0 0\"/> <axis xyz=\"0 0 1\"/> </joint> <link name=\"wheel_left_link\"> </link> <joint name=\"wheel_right_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"wheel_right_link\"/> <origin xyz=\"0.0 -0.080 0.023\" rpy=\"-1.57 0 0\"/> <axis xyz=\"0 0 1\"/> </joint> <link name=\"wheel_right_link\"> </link> <joint name=\"caster_back_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"caster_back_link\"/> <origin xyz=\"-0.081 0 -0.004\" rpy=\"-1.57 0 0\"/> </joint> <link name=\"caster_back_link\"> </link> </robot> Static TF publisher launch file #!/usr/bin/env python3 # # Copyright 2019 ROBOTIS CO., LTD. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Authors: Darby Lim import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description(): use_sim_time = LaunchConfiguration('use_sim_time', default='false') urdf = '/home/pi/amr_config/eru.urdf' # Major refactor of the robot_state_publisher # Reference page: https://github.com/ros2/demos/pull/426 with open(urdf, 'r') as infp: robot_desc = infp.read() rsp_params = {'robot_description': robot_desc} # print (robot_desc) # Printing urdf information. return LaunchDescription([ DeclareLaunchArgument( 'use_sim_time', default_value='false', description='Use simulation (Gazebo) clock if true'), Node( package='robot_state_publisher', executable='robot_state_publisher', output='screen', parameters=[rsp_params, {'use_sim_time': use_sim_time}]) ]) Start publish static TF pi@pi-desktop:~$ ros2 launch state_publisher.py SLAM package: slam_toolbox launch file: online_async_launch.py parameters: 'use_sim_time': LaunchConfiguration(\"sim\"), slam_param_name: slam_config_path Installation sudo apt install ros-humble-slam-toolbox Save a map file cd linorobot2/linorobot2_navigation/maps ros2 run nav2_map_server map_saver_cli -f <map_name> --ros-args -p save_map_timeout:=10000. # Copyright (c) 2021 Juan Miguel Jimeno # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http:#www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. import os from launch import LaunchDescription from launch import LaunchContext from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription from launch.substitutions import LaunchConfiguration, PathJoinSubstitution from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.conditions import IfCondition from launch.substitutions import EnvironmentVariable from launch_ros.substitutions import FindPackageShare from launch_ros.actions import Node def generate_launch_description(): slam_launch_path = PathJoinSubstitution( [FindPackageShare('slam_toolbox'), 'launch', 'online_async_launch.py'] ) slam_config_path = PathJoinSubstitution( [FindPackageShare('linorobot2_navigation'), 'config', 'slam.yaml'] ) rviz_config_path = PathJoinSubstitution( [FindPackageShare('linorobot2_navigation'), 'rviz', 'linorobot2_slam.rviz'] ) lc = LaunchContext() ros_distro = EnvironmentVariable('ROS_DISTRO') slam_param_name = 'slam_params_file' if ros_distro.perform(lc) == 'foxy': slam_param_name = 'params_file' return LaunchDescription([ DeclareLaunchArgument( name='sim', default_value='false', description='Enable use_sime_time to true' ), IncludeLaunchDescription( PythonLaunchDescriptionSource(slam_launch_path), launch_arguments={ 'use_sim_time': LaunchConfiguration(\"sim\"), slam_param_name: slam_config_path }.items() ), ]) Navigation package: nav2_bringup launch file: bringup_launch.py parameters: map: LaunchConfiguration(\"map\"), use_sim_time': LaunchConfiguration(\"sim\"), params_file': nav2_config_path launch file snippet: # Copyright (c) 2021 Juan Miguel Jimeno # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http:#www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. import os from launch import LaunchDescription from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription from launch.substitutions import LaunchConfiguration, PathJoinSubstitution from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.conditions import IfCondition from launch_ros.substitutions import FindPackageShare from launch_ros.actions import Node def generate_launch_description(): nav2_launch_path = PathJoinSubstitution( [FindPackageShare('nav2_bringup'), 'launch', 'bringup_launch.py'] ) #default_map_path = '/home/pi/amr_config/maps/myOfficeDesk.yaml' default_map_path = '/home/pi/amr_config/maps/house1.yaml' nav2_config_path = '/home/pi/amr_config/navigation.yaml' return LaunchDescription([ DeclareLaunchArgument( name='sim', default_value='false', description='Enable use_sime_time to true' ), DeclareLaunchArgument( name='map', default_value=default_map_path, description='Navigation map path' ), IncludeLaunchDescription( PythonLaunchDescriptionSource(nav2_launch_path), launch_arguments={ 'map': LaunchConfiguration(\"map\"), 'use_sim_time': LaunchConfiguration(\"sim\"), 'params_file': nav2_config_path }.items() ) ])","title":"Nav2"},{"location":"nav2/#base-controller","text":"Microros agent to communicate with OpenCR ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyACM0 -v6 ekf.yaml EKFekf_filter_node: ros__parameters: frequency: 30.0 two_d_mode: true publish_tf: true map_frame: map odom_frame: odom base_link_frame: base_footprint world_frame: odom #x , y , z, #roll , pitch , yaw, #vx , vy , vz, #vroll , vpitch, vyaw, #ax , ay , az odom0: odom/unfiltered odom0_config: [false, false, false, false, false, false, true, true, false, false, false, true, false, false, false] odom0_differential: true odom0_relative: false imu0: imu/data imu0_config: [false, false, false, false, false, true, false, false, false, false, false, true, false, false, false] imu0_differential: false imu0_relative: true imu0_queue_size: 2 Check topic publishing rate pi@pi-desktop:~$ ros2 topic hz /odom/unfiltered average rate: 48.074 min: 0.019s max: 0.025s std dev: 0.00124s window: 50 average rate: 48.147 min: 0.019s max: 0.025s std dev: 0.00117s window: 99 average rate: 48.082 min: 0.019s max: 0.025s std dev: 0.00111s window: 147","title":"Base controller"},{"location":"nav2/#bring-up","text":"install IMU : witmotion : witmotion package install movebase controller: openCR : microros agent and microros Arduino intall EKF robot localization: --- : sudo apt install ros-humble-robot-localization bringup.py from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node import os def generate_launch_description(): config_witmotion = os.path.join(get_package_share_directory('witmotion_ros'),'config', 'wt61c.yml') ekf_config_path = '/home/pi/amr_config/ekf.yaml' return LaunchDescription([ Node( package='micro_ros_agent', executable='micro_ros_agent', name='micro_ros_agent', arguments=[\"serial\", \"--dev\", \"/dev/ttyACM0\", \"-v6\"] ), Node( package = 'witmotion_ros', executable = 'witmotion_ros_node', parameters = [config_witmotion] ), Node( package='robot_localization', executable='ekf_node', name='ekf_filter_node', output='screen', parameters=[ ekf_config_path ], remappings=[(\"odometry/filtered\", \"odom\")] ), ])","title":"Bring up"},{"location":"nav2/#tf","text":"eru.urdf <?xml version=\"1.0\" ?> <robot name=\"turtlebot3_burger\" xmlns:xacro=\"http://ros.org/wiki/xacro\"> <link name=\"base_footprint\"/> <joint name=\"base_joint\" type=\"fixed\"> <parent link=\"base_footprint\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.020\" rpy=\"0 0 0\"/> </joint> <link name=\"base_link\"> </link> <joint name=\"imu_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"imu_link\"/> <origin xyz=\"-0.007 0 0.05\" rpy=\"0 0 0\"/> </joint> <link name=\"imu_link\"/> <joint name=\"scan_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"base_scan\"/> <origin xyz=\"-0.04 0 0.095\" rpy=\"0 0 0\"/> </joint> <link name=\"base_scan\"> </link> <joint name=\"wheel_left_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"wheel_left_link\"/> <origin xyz=\"0.0 0.08 0.023\" rpy=\"-1.57 0 0\"/> <axis xyz=\"0 0 1\"/> </joint> <link name=\"wheel_left_link\"> </link> <joint name=\"wheel_right_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"wheel_right_link\"/> <origin xyz=\"0.0 -0.080 0.023\" rpy=\"-1.57 0 0\"/> <axis xyz=\"0 0 1\"/> </joint> <link name=\"wheel_right_link\"> </link> <joint name=\"caster_back_joint\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"caster_back_link\"/> <origin xyz=\"-0.081 0 -0.004\" rpy=\"-1.57 0 0\"/> </joint> <link name=\"caster_back_link\"> </link> </robot> Static TF publisher launch file #!/usr/bin/env python3 # # Copyright 2019 ROBOTIS CO., LTD. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Authors: Darby Lim import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description(): use_sim_time = LaunchConfiguration('use_sim_time', default='false') urdf = '/home/pi/amr_config/eru.urdf' # Major refactor of the robot_state_publisher # Reference page: https://github.com/ros2/demos/pull/426 with open(urdf, 'r') as infp: robot_desc = infp.read() rsp_params = {'robot_description': robot_desc} # print (robot_desc) # Printing urdf information. return LaunchDescription([ DeclareLaunchArgument( 'use_sim_time', default_value='false', description='Use simulation (Gazebo) clock if true'), Node( package='robot_state_publisher', executable='robot_state_publisher', output='screen', parameters=[rsp_params, {'use_sim_time': use_sim_time}]) ]) Start publish static TF pi@pi-desktop:~$ ros2 launch state_publisher.py","title":"TF"},{"location":"nav2/#slam","text":"package: slam_toolbox launch file: online_async_launch.py parameters: 'use_sim_time': LaunchConfiguration(\"sim\"), slam_param_name: slam_config_path Installation sudo apt install ros-humble-slam-toolbox Save a map file cd linorobot2/linorobot2_navigation/maps ros2 run nav2_map_server map_saver_cli -f <map_name> --ros-args -p save_map_timeout:=10000. # Copyright (c) 2021 Juan Miguel Jimeno # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http:#www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. import os from launch import LaunchDescription from launch import LaunchContext from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription from launch.substitutions import LaunchConfiguration, PathJoinSubstitution from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.conditions import IfCondition from launch.substitutions import EnvironmentVariable from launch_ros.substitutions import FindPackageShare from launch_ros.actions import Node def generate_launch_description(): slam_launch_path = PathJoinSubstitution( [FindPackageShare('slam_toolbox'), 'launch', 'online_async_launch.py'] ) slam_config_path = PathJoinSubstitution( [FindPackageShare('linorobot2_navigation'), 'config', 'slam.yaml'] ) rviz_config_path = PathJoinSubstitution( [FindPackageShare('linorobot2_navigation'), 'rviz', 'linorobot2_slam.rviz'] ) lc = LaunchContext() ros_distro = EnvironmentVariable('ROS_DISTRO') slam_param_name = 'slam_params_file' if ros_distro.perform(lc) == 'foxy': slam_param_name = 'params_file' return LaunchDescription([ DeclareLaunchArgument( name='sim', default_value='false', description='Enable use_sime_time to true' ), IncludeLaunchDescription( PythonLaunchDescriptionSource(slam_launch_path), launch_arguments={ 'use_sim_time': LaunchConfiguration(\"sim\"), slam_param_name: slam_config_path }.items() ), ])","title":"SLAM"},{"location":"nav2/#navigation","text":"package: nav2_bringup launch file: bringup_launch.py parameters: map: LaunchConfiguration(\"map\"), use_sim_time': LaunchConfiguration(\"sim\"), params_file': nav2_config_path launch file snippet: # Copyright (c) 2021 Juan Miguel Jimeno # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http:#www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. import os from launch import LaunchDescription from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription from launch.substitutions import LaunchConfiguration, PathJoinSubstitution from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.conditions import IfCondition from launch_ros.substitutions import FindPackageShare from launch_ros.actions import Node def generate_launch_description(): nav2_launch_path = PathJoinSubstitution( [FindPackageShare('nav2_bringup'), 'launch', 'bringup_launch.py'] ) #default_map_path = '/home/pi/amr_config/maps/myOfficeDesk.yaml' default_map_path = '/home/pi/amr_config/maps/house1.yaml' nav2_config_path = '/home/pi/amr_config/navigation.yaml' return LaunchDescription([ DeclareLaunchArgument( name='sim', default_value='false', description='Enable use_sime_time to true' ), DeclareLaunchArgument( name='map', default_value=default_map_path, description='Navigation map path' ), IncludeLaunchDescription( PythonLaunchDescriptionSource(nav2_launch_path), launch_arguments={ 'map': LaunchConfiguration(\"map\"), 'use_sim_time': LaunchConfiguration(\"sim\"), 'params_file': nav2_config_path }.items() ) ])","title":"Navigation"}]}